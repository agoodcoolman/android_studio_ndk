apply plugin: 'com.android.model.application'
def ndkDir = System.getenv("ANDROID_NDK");
def propertiesFile = project.rootProject.file("local.properties")
if (propertiesFile.exists()) {

    def properties = new Properties()
    properties.load(propertiesFile.newDataInputStream())
    ndkDir = properties.getProperty("ndk.dir")
}

model {
    android {
        compileSdkVersion = 23
        buildToolsVersion = "23.0.3"

        defaultConfig.with {
            applicationId = "com.jin.android.myapplication"
            minSdkVersion.apiLevel  = 10
            targetSdkVersion.apiLevel = 22
            versionCode = 1
            versionName = "1.0"
        }

        sources {
            
            main {
                jni {
                    source {
                        srcDir  "src"
                        srcDirs "${ndkDir}/source/transcode/avilib"
                    }
                    exportedHeaders {
                        srcDirs  "${ndkDir}/source/transcode/avilib"
                    }
                }
            }
        }

    }
    android.buildTypes {
        release {
            ndk.debuggable = true

        }

        debug {
            debuggable = true
            ndk.with {
                debuggable = true
            }
        }
    }
    android.buildTypes {
        release {
            minifyEnabled = false
            proguardFiles.add(file('proguard-rules.pro'))

        }
    }



    android.ndk {
        moduleName = "what"
        toolchain = "clang"
        cppFlags.add("-std=c++11")
        cppFlags.add("-fexceptions")
        cppFlags.add("-I${file("src/main/jni/include")}".toString())
        ldLibs.addAll(["android", "log", "transcode/avilib"])
         // 这里使用了add添加，把 android /log分开了。  之前使用 ["android", "log"] 这样写报错了。
        cppFlags.add("-I${file("C:/android/android_ndk/android-ndk-r12/sources/transcode/avilib")}".toString())

        stl = "gnustl_shared"
        cppFlags.addAll(['-Wall'])

    }


    android.productFlavors {

        create("arm") {
            ndk.abiFilters.add("armeabi")
        }

        create("arm8") {
            ndk.abiFilters.add("arm64-v8a")
        }
        create("x86") {
            ndk.abiFilters.add("x86")
        }
        create("x86-64") {
            ndk.abiFilters.add("x86_64")
        }
        create("mips") {
            ndk.abiFilters.add("mips")
        }
        create("mips-64") {
            ndk.abiFilters.add("mips64")
        }
        // To include all cpu architectures, leaves abiFilters empty
        create("all")


    }


}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.4.0'
}

